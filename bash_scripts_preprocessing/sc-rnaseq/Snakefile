from pprint import pprint
from snakemake.utils import R
import os
import pandas as pd
from glob import glob
from collections import defaultdict


shell.prefix("set +euo pipefail;")

## path to fastq
READSDIR="/scratch/users/barisano/sophia_meninges_scrnaseq/run36/samples/"



HREFDIR =        "/home/groups/mghayden/tools/refgenomes/GRCh38/gencode/release_34/"
HTMPDIR =        "/scratch/users/barisano/sophia_meninges_scrnaseq/tmp/"
HSTARFASTAREF =  HREFDIR+"GRCh38.primary_assembly.genome.GFP.ERCC92.fa"
HSTARREFDIR =    "/home/groups/mghayden/tools/star/index/GRCh38/gencode/release_34/2.7.4a/"
HGTFFILE =       HREFDIR+"gencode.v34.annotation.GFP.ERCC92.gtf"
HCHRNAME =       HSTARREFDIR + "chrName.txt"

MREFDIR =        "/home/groups/mghayden/tools/refgenomes/GRCm38/gencode/release_M25/"
MTMPDIR =        "/scratch/users/barisano/sophia_meninges_scrnaseq/tmp/"
MSTARFASTAREF =  MREFDIR+"GRCm38.primary_assembly.genome.ERCC92.fa"
MSTARREFDIR =    "/home/groups/mghayden/tools/star/index/GRCm38/gencode/release_M25/2.7.4a/"
MGTFFILE =       MREFDIR+"gencode.vM25.annotation.ERCC92.gtf"
MCHRNAME =       MSTARREFDIR + "chrName.txt"

STAR =          "/home/groups/mghayden/software/star/2.7.10a/bin/Linux_x86_64_static/STAR"

WC = glob_wildcards(READSDIR+"{fullname}_R1_001.fastq.gz")
SAMPLES = set(WC.fullname) # unique sample names
pprint(WC)


HCOUNTS_TABLE_HTSEQ = 'Human.counts.table.tsv'
MCOUNTS_TABLE_HTSEQ = 'Mouse.counts.table.tsv'
HCOUNTS =        ['hcounts/' + f + '.htseq.tsv' for f in SAMPLES]
MCOUNTS =        ['mcounts/' + f + '.htseq.tsv' for f in SAMPLES]
HMAPPED =        ['hmapped/' + f + '.Aligned.sortedByCoord.out.bam' for f in SAMPLES]
MMAPPED =        ['mmapped/' + f + '.Aligned.sortedByCoord.out.bam' for f in SAMPLES]




rule all:
     input: HCOUNTS_TABLE_HTSEQ, MCOUNTS_TABLE_HTSEQ
     params: name="all", partition="normal", mem="1024"
     threads: 1



##### STAR INDEX #####

rule starindex_human:
    input:
        ref = HSTARFASTAREF, starref = HSTARREFDIR, gtf = HGTFFILE
    output:
        HCHRNAME
    threads: 8
    params: name="index_STAR", partition="normal", mem="124000"
    shell:
        """
        {STAR} --runThreadN 8 \
               --sjdbGTFfile {input.gtf} \
               --sjdbOverhang 99 \
               --runMode genomeGenerate \
               --genomeDir {input.starref} \
               --genomeFastaFiles {input.ref}
        """


rule starindex_mouse:
    input:
        ref = MSTARFASTAREF, starref = MSTARREFDIR, gtf = MGTFFILE
    output:
        MCHRNAME
    threads: 8
    params: name="index_STAR", partition="normal", mem="124000"
    shell:
        """
        {STAR} --runThreadN 8 \
               --sjdbGTFfile {input.gtf} \
               --sjdbOverhang 99 \
               --runMode genomeGenerate \
               --genomeDir {input.starref} \
               --genomeFastaFiles {input.ref}
        """


##### MAP ##########

rule map_human:
     input: HCHRNAME,
       R1=READSDIR+"{sample}_R1_001.fastq.gz",
       R2=READSDIR+"{sample}_R2_001.fastq.gz",
       starref=HSTARREFDIR,
       gtf=HGTFFILE
     output: "hmapped/{sample}.Aligned.sortedByCoord.out.bam", "hmapped/{sample}.Aligned.out.bam"
     threads: 4
     params: name="STAR_{sample}", mem="32000", dir="hmapped/{sample}"
     shell:
       """
       {STAR}  --genomeDir {input.starref} \
               --outFileNamePrefix {params.dir}. \
               --readFilesIn {input.R1} {input.R2}\
               --runThreadN 4 \
               --readFilesCommand zcat \
               --outReadsUnmapped Fastx \
               --outSAMtype BAM Unsorted SortedByCoordinate \
               --outSAMattributes All \
               --outMultimapperOrder Random
       """

rule map_mouse:
     input: MCHRNAME,
       R1=READSDIR+"{sample}_R1_001.fastq.gz",
       R2=READSDIR+"{sample}_R2_001.fastq.gz",
       starref=MSTARREFDIR,
       gtf=MGTFFILE
     output: "mmapped/{sample}.Aligned.sortedByCoord.out.bam", "mmapped/{sample}.Aligned.out.bam"
     threads: 4
     params: name="STAR_{sample}", mem="32000", dir="mmapped/{sample}"
     shell:
       """
       {STAR}  --genomeDir {input.starref} \
               --outFileNamePrefix {params.dir}. \
               --readFilesIn {input.R1} {input.R2}\
               --runThreadN 4 \
               --readFilesCommand zcat \
               --outReadsUnmapped Fastx \
               --outSAMtype BAM Unsorted SortedByCoordinate \
               --outSAMattributes All \
               --outMultimapperOrder Random
       """
       

##### Count #####
rule htseq_human:
    input: sample="hmapped/{sample}.Aligned.sortedByCoord.out.bam", gtf=HGTFFILE
    output: id="hcounts/{sample}.htseq.tsv"
    threads: 1
    params: name="htseq_{sample}", partition="normal", mem="4000"
    conda:
        "./envs/omic_qc_wf.yaml"
    shell:
      """
        samtools view -h {input.sample} | htseq-count \
            --mode intersection-strict \
            --stranded no \
            --type exon \
            --additional-attr gene_name \
            --idattr gene_id - {input.gtf} > {output.id}
      """

rule htseq_mouse:
    input: sample="mmapped/{sample}.Aligned.sortedByCoord.out.bam", gtf=MGTFFILE
    output: id="mcounts/{sample}.htseq.tsv"
    threads: 1
    params: name="htseq_{sample}", partition="normal", mem="4000"
    conda:
        "./envs/omic_qc_wf.yaml"
    shell:
      """
        samtools view -h {input.sample} | htseq-count \
            --mode intersection-strict \
            --stranded no \
            --type exon \
            --additional-attr gene_name \
            --idattr gene_id - {input.gtf} > {output.id}
      """



##### Table HTSEQ #####
rule tablehtseq_human:
    input: HCOUNTS
    output: HCOUNTS_TABLE_HTSEQ
    threads: 1
    params: name="R_htseq_table", mem="4000"
    run:
        R("""
           file_list <- list.files(path="hcounts/", recursive=TRUE, pattern = ".htseq.tsv", full.names=TRUE)
           for (file in file_list){{
             if (!exists("dataset")){{
               dataset <- read.table(file, header=F, sep="\t", row.names=1)
               colnames(dataset)[2]<-gsub("\\\\__.*","",file)
             }}


             if (exists("dataset")){{
                temp_dataset <-read.table(file, header=F, sep="\t",row.names=1)
                temp_dataset <-temp_dataset[,-(1*1),drop=FALSE]
                colnames(temp_dataset)[1]<-gsub("\\\\__.*","",file)
                dataset<-cbind(dataset, temp_dataset)
                rm(temp_dataset)
              }}

            }}


            htseq.data<-dataset

            remove(dataset)

            write.table(htseq.data,"{HCOUNTS_TABLE_HTSEQ}", sep="\t",col.names = TRUE, row.names=TRUE,quote=FALSE)
          """)




rule tablehtseq_mouse:
    input: MCOUNTS
    output: MCOUNTS_TABLE_HTSEQ
    threads: 1
    params: name="R_htseq_table", mem="4000"
    run:
        R("""
           file_list <- list.files(path="mcounts/", recursive=TRUE, pattern = ".htseq.tsv", full.names=TRUE)
           for (file in file_list){{
             if (!exists("dataset")){{
               dataset <- read.table(file, header=F, sep="\t", row.names=1)
               colnames(dataset)[2]<-gsub("\\\\__.*","",file)
             }}


             if (exists("dataset")){{
                temp_dataset <-read.table(file, header=F, sep="\t",row.names=1)
                temp_dataset <-temp_dataset[,-(1*1),drop=FALSE]
                colnames(temp_dataset)[1]<-gsub("\\\\__.*","",file)
                dataset<-cbind(dataset, temp_dataset)
                rm(temp_dataset)
              }}

            }}


            htseq.data<-dataset

            remove(dataset)

            write.table(htseq.data,"{MCOUNTS_TABLE_HTSEQ}", sep="\t",col.names = TRUE, row.names=TRUE,quote=FALSE)
        """)
